{
  "address": "0x083454d8b6c81fe44f7F600Dc9202eB72bdAfB69",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcebecf41536371a117df948309cf26ec8d30882c27b9bd115063b7f809d08b02",
  "receipt": {
    "to": null,
    "from": "0xE5CFc7bce89a5e7a7A2b2F77A812c36B36C23Ddc",
    "contractAddress": "0x083454d8b6c81fe44f7F600Dc9202eB72bdAfB69",
    "transactionIndex": 37,
    "gasUsed": "1006419",
    "logsBloom": "0x
    "blockHash": "0x25820c49b5db0ae441a19302516e13067aabcd06afd7d639ba8af0d25f1287fa",
    "transactionHash": "0xcebecf41536371a117df948309cf26ec8d30882c27b9bd115063b7f809d08b02",
    "logs": [],
    "blockNumber": 10849219,
    "cumulativeGasUsed": "10262531",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 6,
  "solcInputHash": "4d6bb9cb696e1251de360244c7c22f2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Brian Tam\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// Get fund from users\\n// Withdraw funds\\n// Set a minimum funding value in USd\\n\\n// SPDX-License-Identifier: MIT\\n// Pragma\\npragma solidity ^0.8.0;\\n// Import\\nimport \\\"./PriceConverter.sol\\\";\\n// Error\\nerror FundMe__NotOwner();\\n\\n// Interface, Library, Contract\\n\\n/** @title A contract for crowd funding\\n *  @author Brian Tam\\n *  @notice This contract is to demo a sample funding contract\\n *  @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // 21,371 constant\\n    // 23471 not constant\\n\\n    // State Variables!\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    uint256 public constant minimumUsd = 50 * 1e18;\\n\\n    address private immutable i_owner;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"Sender is not the owner\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _; // All the code in the function, has to be after require\\n    }\\n\\n    constructor(address s_priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     *  @notice This function funds this contract\\n     *  @dev This implements price feeds as our library\\n     *\\n     */\\n\\n    // 837,393\\n    function fund() public payable {\\n        // want to be able to set a minimum fund amount in USD\\n        // 1. How do we send ETH to this contract\\n        // the value would be in *** wei ***\\n        // conversion from wei (18 dec.)  to usd (18dec.\\uff09\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= minimumUsd,\\n            \\\"You need to spend more ETH!\\\"\\n        ); // 1e18 = 1*10**18 == 1000000000000000000 == ethereum\\n        // msg value will have 18 decimals\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mapping cant be in memory\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xdbe9ef290defd65925881e490eb0c04dceb0d34156e928f4287691b9f0ed4ba2\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    // call it get fiatConversionRate, since it assumes something about decimals\\n    // It wouldn't work for every aggregator\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x816bfc0d7085476448fbd75002e92b51d4498a9d9d5b7944044639b1cf8ebdc1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200126238038062001262833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6110d56200018d60003960008181610344015281816104d701528181610570015281816105c001526107b601526110d56000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb2514610098578063098de820146100d55780633ccfd60b14610100578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a79565b6102ec565b6040516100cc9190610abf565b60405180910390f35b3480156100e157600080fd5b506100ea610335565b6040516100f79190610abf565b60405180910390f35b610108610342565b005b34801561011657600080fd5b5061011f61056c565b60405161012c9190610ae9565b60405180910390f35b34801561014157600080fd5b5061014a610594565b6040516101579190610b63565b60405180910390f35b6101686101b1565b005b6101726105be565b005b34801561018057600080fd5b5061019b60048036038101906101969190610baa565b61084c565b6040516101a89190610ae9565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089390919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610c34565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102809190610c83565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c7576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104725760008082815481106103ec576103eb610cd9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046a90610d08565b9150506103ca565b50600067ffffffffffffffff81111561048e5761048d610d51565b5b6040519080825280602002602001820160405280156104bc5781602001602082028036833780820191505090505b50600090805190602001906104d292919061096f565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161051990610db1565b60006040518083038185875af1925050503d8060008114610556576040519150601f19603f3d011682016040523d82523d6000602084013e61055b565b606091505b505090508061056957600080fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610643576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106c657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161067c575b5050505050905060005b81518110156107515760008282815181106106ee576106ed610cd9565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074990610d08565b9150506106d0565b50600067ffffffffffffffff81111561076d5761076c610d51565b5b60405190808252806020026020018201604052801561079b5781602001602082028036833780820191505090505b50600090805190602001906107b192919061096f565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107f890610db1565b60006040518083038185875af1925050503d8060008114610835576040519150601f19603f3d011682016040523d82523d6000602084013e61083a565b606091505b505090508061084857600080fd5b5050565b600080828154811061086157610860610cd9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061089f836108cf565b90506000670de0b6b3a764000085836108b89190610dc6565b6108c29190610e4f565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561091857600080fd5b505afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109509190610f0d565b5050509150506402540be400816109679190610f88565b915050919050565b8280548282559060005260206000209081019282156109e8579160200282015b828111156109e75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061098f565b5b5090506109f591906109f9565b5090565b5b80821115610a125760008160009055506001016109fa565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4682610a1b565b9050919050565b610a5681610a3b565b8114610a6157600080fd5b50565b600081359050610a7381610a4d565b92915050565b600060208284031215610a8f57610a8e610a16565b5b6000610a9d84828501610a64565b91505092915050565b6000819050919050565b610ab981610aa6565b82525050565b6000602082019050610ad46000830184610ab0565b92915050565b610ae381610a3b565b82525050565b6000602082019050610afe6000830184610ada565b92915050565b6000819050919050565b6000610b29610b24610b1f84610a1b565b610b04565b610a1b565b9050919050565b6000610b3b82610b0e565b9050919050565b6000610b4d82610b30565b9050919050565b610b5d81610b42565b82525050565b6000602082019050610b786000830184610b54565b92915050565b610b8781610aa6565b8114610b9257600080fd5b50565b600081359050610ba481610b7e565b92915050565b600060208284031215610bc057610bbf610a16565b5b6000610bce84828501610b95565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c1e601b83610bd7565b9150610c2982610be8565b602082019050919050565b60006020820190508181036000830152610c4d81610c11565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c8e82610aa6565b9150610c9983610aa6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cce57610ccd610c54565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d1382610aa6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d4657610d45610c54565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d9b600083610d80565b9150610da682610d8b565b600082019050919050565b6000610dbc82610d8e565b9150819050919050565b6000610dd182610aa6565b9150610ddc83610aa6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e1557610e14610c54565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e5a82610aa6565b9150610e6583610aa6565b925082610e7557610e74610e20565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e9f81610e80565b8114610eaa57600080fd5b50565b600081519050610ebc81610e96565b92915050565b6000819050919050565b610ed581610ec2565b8114610ee057600080fd5b50565b600081519050610ef281610ecc565b92915050565b600081519050610f0781610b7e565b92915050565b600080600080600060a08688031215610f2957610f28610a16565b5b6000610f3788828901610ead565b9550506020610f4888828901610ee3565b9450506040610f5988828901610ef8565b9350506060610f6a88828901610ef8565b9250506080610f7b88828901610ead565b9150509295509295909350565b6000610f9382610ec2565b9150610f9e83610ec2565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610fdd57610fdc610c54565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561101a57611019610c54565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561105757611056610c54565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561109457611093610c54565b5b82820290509291505056fea2646970667358221220148a9d3ed0580844ede14c130584eb8f0b36c93c351db9b49a87ad59d421560464736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb2514610098578063098de820146100d55780633ccfd60b14610100578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a79565b6102ec565b6040516100cc9190610abf565b60405180910390f35b3480156100e157600080fd5b506100ea610335565b6040516100f79190610abf565b60405180910390f35b610108610342565b005b34801561011657600080fd5b5061011f61056c565b60405161012c9190610ae9565b60405180910390f35b34801561014157600080fd5b5061014a610594565b6040516101579190610b63565b60405180910390f35b6101686101b1565b005b6101726105be565b005b34801561018057600080fd5b5061019b60048036038101906101969190610baa565b61084c565b6040516101a89190610ae9565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089390919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610c34565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102809190610c83565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c7576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104725760008082815481106103ec576103eb610cd9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046a90610d08565b9150506103ca565b50600067ffffffffffffffff81111561048e5761048d610d51565b5b6040519080825280602002602001820160405280156104bc5781602001602082028036833780820191505090505b50600090805190602001906104d292919061096f565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161051990610db1565b60006040518083038185875af1925050503d8060008114610556576040519150601f19603f3d011682016040523d82523d6000602084013e61055b565b606091505b505090508061056957600080fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610643576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106c657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161067c575b5050505050905060005b81518110156107515760008282815181106106ee576106ed610cd9565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074990610d08565b9150506106d0565b50600067ffffffffffffffff81111561076d5761076c610d51565b5b60405190808252806020026020018201604052801561079b5781602001602082028036833780820191505090505b50600090805190602001906107b192919061096f565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107f890610db1565b60006040518083038185875af1925050503d8060008114610835576040519150601f19603f3d011682016040523d82523d6000602084013e61083a565b606091505b505090508061084857600080fd5b5050565b600080828154811061086157610860610cd9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061089f836108cf565b90506000670de0b6b3a764000085836108b89190610dc6565b6108c29190610e4f565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561091857600080fd5b505afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109509190610f0d565b5050509150506402540be400816109679190610f88565b915050919050565b8280548282559060005260206000209081019282156109e8579160200282015b828111156109e75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061098f565b5b5090506109f591906109f9565b5090565b5b80821115610a125760008160009055506001016109fa565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4682610a1b565b9050919050565b610a5681610a3b565b8114610a6157600080fd5b50565b600081359050610a7381610a4d565b92915050565b600060208284031215610a8f57610a8e610a16565b5b6000610a9d84828501610a64565b91505092915050565b6000819050919050565b610ab981610aa6565b82525050565b6000602082019050610ad46000830184610ab0565b92915050565b610ae381610a3b565b82525050565b6000602082019050610afe6000830184610ada565b92915050565b6000819050919050565b6000610b29610b24610b1f84610a1b565b610b04565b610a1b565b9050919050565b6000610b3b82610b0e565b9050919050565b6000610b4d82610b30565b9050919050565b610b5d81610b42565b82525050565b6000602082019050610b786000830184610b54565b92915050565b610b8781610aa6565b8114610b9257600080fd5b50565b600081359050610ba481610b7e565b92915050565b600060208284031215610bc057610bbf610a16565b5b6000610bce84828501610b95565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c1e601b83610bd7565b9150610c2982610be8565b602082019050919050565b60006020820190508181036000830152610c4d81610c11565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c8e82610aa6565b9150610c9983610aa6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cce57610ccd610c54565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d1382610aa6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d4657610d45610c54565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d9b600083610d80565b9150610da682610d8b565b600082019050919050565b6000610dbc82610d8e565b9150819050919050565b6000610dd182610aa6565b9150610ddc83610aa6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e1557610e14610c54565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e5a82610aa6565b9150610e6583610aa6565b925082610e7557610e74610e20565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e9f81610e80565b8114610eaa57600080fd5b50565b600081519050610ebc81610e96565b92915050565b6000819050919050565b610ed581610ec2565b8114610ee057600080fd5b50565b600081519050610ef281610ecc565b92915050565b600081519050610f0781610b7e565b92915050565b600080600080600060a08688031215610f2957610f28610a16565b5b6000610f3788828901610ead565b9550506020610f4888828901610ee3565b9450506040610f5988828901610ef8565b9350506060610f6a88828901610ef8565b9250506080610f7b88828901610ead565b9150509295509295909350565b6000610f9382610ec2565b9150610f9e83610ec2565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610fdd57610fdc610c54565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561101a57611019610c54565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561105757611056610c54565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561109457611093610c54565b5b82820290509291505056fea2646970667358221220148a9d3ed0580844ede14c130584eb8f0b36c93c351db9b49a87ad59d421560464736f6c63430008080033",
  "devdoc": {
    "author": "Brian Tam",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 57,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}